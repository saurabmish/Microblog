workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test


version: 2
jobs:

  build:

    working_directory: ~/microblog
    docker:
      - image: circleci/python:3.9.1      # primary container - build job steps are run
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install Project Dependencies
          command: |
            python -m venv django-project
            source django-project/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "django-project"

  test:

    working_directory: ~/microblog
    docker:
      - image: circleci/python:3.9.1
        environment:
          DATABASE_URL: postgresql://postgres@localhost/microblogdb?sslmode=disable

      - image: circleci/postgres:13.1     # services container - needed to run primary container
        environment:
          POSTGRES_DB: microblogdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
        entrypoint: bash
        command: >
          -c '
            openssl req -nodes -new -x509 -subj "/CN=localhost" -keyout server.key -out server.crt &&
            chown postgres server.key &&
            chmod 600 /server.key &&
            exec /docker-entrypoint.sh -c ssl=on -c ssl_cert_file=/server.crt -c ssl_key_file=/server.key
          '
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Test Application
          command: |
            # Reactivate virtual environment
            source django-project/bin/activate
            # Testing does not run collectstatic by default and this app is using a storage class that requires it.
            python manage.py collectstatic
            # Run tests for each logical component with maximum verbosity
            python manage.py test blog.tests --verbosity=3
            python manage.py test user.tests --verbosity=3
            # Remove any coverage data from previous runs
            coverage erase
            # Generate coverage for all logical components
            coverage run manage.py test
            # Show coverage metrics on shell
            coverage report -m
            # Generate XML report
            coverage xml
            # Public report to codecov.io
            bash <(curl -s https://codecov.io/bash) -f tests/coverage/coverage.xml

  deploy:

    working_directory: ~/microblog
    machine:
      enabled: true
    steps:
      - checkout
      - run:
          name: Setup Heroku and Deploy Master
          command: |
            curl https://cli-assets.heroku.com/install.sh | sh
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP.git master
            heroku run python manage.py makemigrations
            heroku run python manage.py migrate
